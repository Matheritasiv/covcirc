/*
 * 程序：求给定点集的最小覆盖圆.
 * 作者：王新煜 <matheritasiv@163.com>
 */

/*{{{ 基础计算函数 */
/*{{{ 表达式化简操作 */
/* 化简标志：计算 / 判定 / 输出 时化简. */
sym_mode : [false, false, false]$
define(op1_simp(expr), if sym_mode[1] then
	'(block(return(radcan(subst([%i = 0], trigrat(expr)))))) else
	'(block(return(expr))))$
define(op2_simp(expr), if not(sym_mode[1]) and sym_mode[2] then
	'(block(return(radcan(subst([%i = 0], trigrat(expr)))))) else
	'(block(return(expr))))$
define(op3_simp(expr), if sym_mode[3] then
	'(block(return(radcan(subst([%i = 0], trigrat(expr)))))) else
	'(block(return(expr))))$
/*}}}*/
/*{{{ 求内积 */
get_inner(x, y) := block(
return(op1_simp(x . y)))$
get_angle(x, y, p) := block(
return(get_inner(x - p, y - p)))$
/*}}}*/
/*{{{ 求距离平方 */
get_distance2(x, y) := block(
return(get_angle(x, x, y)))$
/*}}}*/
/*{{{ 求叉乘 */
get_cross(x, y) := block(
return(op1_simp([x[2] * y[3] - x[3] * y[2],
	x[3] * y[1] - x[1] * y[3],
	x[1] * y[2] - x[2] * y[1]])))$
get_det2(x, y) := block(
return(op1_simp(x[1] * y[2] - x[2] * y[1])))$
/*}}}*/
/*{{{ 求绕向 */
get_orient(x, y, z) := block([d],
d : op1_simp(determinant(addcol(matrix(x, y, z), makelist(1, 3)))),
if d > 0 then return(1) elseif d < 0 then return(-1) else return(0))$
/*}}}*/
/*{{{ 求最值 */
get_max(L) := block([m : minf, j : 0],
for i thru length(L) do if m < L[i] then [m, j] : [L[i], i],
return([m, j]))$
get_min(L) := block([m : inf, j : 0],
for i thru length(L) do if m > L[i] then [m, j] : [L[i], i],
return([m, j]))$
get_max_min(L) := block([M : minf, m : inf, jM : 0, jm : 0],
for i thru length(L) do (
	if M < L[i] then [M, jM] : [L[i], i],
	if m > L[i] then [m, jm] : [L[i], i]),
return([M, jM, m, jm]))$
/*}}}*/
/*}}}*/
/*{{{ 计算几何算法 */
/*{{{ 点集凸包算法 */
get_convex(P) := block([res_convex, a : 1, b : 1],
if length(P) = 0 then return([]) elseif length(P) = 1 then return([P[1]]) else P : args(P),
res_convex : lambda([i1, i2], block([m, i, b : get_det2(P[i1], P[i2]), v : P[i2] - P[i1]],
	[m, i] : get_max(map(lambda([t], get_inner([v[2], -v[1]], t)), P)),
	return(if equal(m, b) then [i1] else append(res_convex(i1, i), res_convex(i, i2))))),
for i : 2 thru length(P) do (
	if P[a][1] < P[i][1] or (P[a][1] = P[i][1] and P[a][2] > P[i][2]) then a : i,
	if P[b][1] > P[i][1] or (P[b][1] = P[i][1] and P[b][2] < P[i][2]) then b : i),
return(if equal(P[a], P[b]) then P[a] else append(res_convex(a, b), res_convex(b, a))))$
/*}}}*/
/*{{{ 点集直径算法 */
get_diameter(P) := block([res_diameter, a : 1, b : 1, D],
if length(P) = 0 then return([]) elseif length(P) = 1 then return([P[1]]) else P : args(P),
res_diameter : lambda([i1, i2], block([L, m, i, j, d1, d2,
	b : get_det2(P[i1], P[i2]), v : P[i2] - P[i1]],
	L : map(lambda([t], get_inner([v[2], -v[1]], t)), P), [m, i, [], j] : get_max_min(L),
	if equal(m, b) then ([d1, d2] : [get_distance2(P[i1], P[j]), get_distance2(P[i2], P[j])],
		return(if d1 > d2 then [d1, [i1, j]] else [d2, [i2, j]]))
	else ([d1, d2] : [res_diameter(i1, i), res_diameter(i, i2)],
		[b, m] : [if d1[1] > d2[1] then d1 else d2, get_distance2(P[i], P[j])],
		return(if m > b[1] then [m, [i, j]] else b)))),
for i : 2 thru length(P) do (
	if P[a][1] < P[i][1] or (P[a][1] = P[i][1] and P[a][2] > P[i][2]) then a : i,
	if P[b][1] > P[i][1] or (P[b][1] = P[i][1] and P[b][2] < P[i][2]) then b : i),
if equal(P[a], P[b]) then return([0, [a, b]])
	else [a, b] : [res_diameter(a, b), res_diameter(b, a)],
D : if a[1] > b[1] then a else b, D[1] : op3_simp(sqrt(D[1])),
return(D))$
/*}}}*/
/*{{{ 点集最小覆盖圆算法 */
get_circle(P) := block([r, C, k, S, v, b, Q1, Q2, dir, ori],
if length(P) < 2 then return([]) else P : args(P),
[[[], C], ori] : [get_diameter(P), '(get_orient(P[C[1]], P[C[2]], P[C[3]]))],
k : for i thru length(P) do
	if get_angle(P[C[1]], P[C[2]], P[i]) > 0 then return(i),
if not(constantp(k)) then return(C) else C : endcons(k, C),
if ev(ori) < 0 then [C[1], C[2]] : [C[2], C[1]],
S : map(lambda([t], endcons(op2_simp(get_inner(t, t)), t)), P),
v : get_cross(S[C[1]] - S[C[3]], S[C[2]] - S[C[3]]),
loop, Q1 : sublist(makelist(i, i, length(P)),
	lambda([t], op2_simp(get_inner(v, (S[t] - S[C[3]]))) > 0)),
if emptyp(Q1) then return(C) else Q2 : Q1,
unless emptyp(Q2) do (
	[k, dir] : [pop(Q2), makelist(substpart('(P[k]), ori, i), i, 3)], dir : ev(dir),
	b : apply("*", dir), if b = 0 then b : 1, [[], r] : get_max(b * dir),
	if b = 1 then C[r] : k elseif get_angle(P[C[r]], P[k],
		P[C[remainder(r, 3) + 1]]) < 0 then C[remainder(r, 3) + 1] : k
		else C[remainder(r + 1, 3) + 1] : k,
	v : get_cross(S[C[1]] - S[C[3]], S[C[2]] - S[C[3]]),
	Q2 : sublist(Q2, lambda([t], op2_simp(get_inner(v, (S[t] - S[C[3]]))) > 0))),
go(loop))$
/*}}}*/
/*}}}*/
/*{{{ 绘图函数 */
/*{{{ 绘制散点图及其最小覆盖圆 */
plot_covcirc(P) := block([C, PP, PC, x0, y0, r],
if length(P) < 2 then return() else P : args(P), C : part(P, get_circle(P)),
[PP, PC] : [transpose(apply(matrix, P)), transpose(apply(matrix, C))],
[x0, y0] : if length(C) = 2 then (C[1] + C[2]) / 2 else
	op3_simp(transpose(invert(matrix(C[1] - C[3], C[2] - C[3])) .
	[C[1] . C[1] - C[3] . C[3], C[2] . C[2] - C[3] . C[3]] / 2)[1]),
r : op3_simp(sqrt(get_distance2(C[1], [x0, y0]))),
plot2d([[discrete, PP[1], PP[2]], [discrete, PC[1], PC[2]], [discrete, [x0], [y0]],
	[parametric, x0 + r * cos(t), y0 + r * sin(t), [t, 0, 2 * %pi]]],
	[x, x0 - r * 6/5, x0 + r * 6/5], [y, y0 - r * 6/5, y0 + r * 6/5], same_xy,
	[point_type, bullet, diamond, plus], [color, blue, red, red, red],
	[style, points, points, points, lines], [legend, false]))$
/*}}}*/
/*{{{ 绘制散点图及其凸包多边形和直径 */
plot_covpoly(P) := block([C, D, PP, PC, PD, xr, yr],
if length(P) < 2 then return() else P : args(P), C : part(P, get_convex(P)),
[PP, PC] : [transpose(apply(matrix, P)), transpose(apply(matrix, endcons(C[1], C)))],
D : part(C, get_diameter(C)[2]), PD : transpose(apply(matrix, D)),
[xr, yr] : [part(get_max_min(PC[1]), [3, 1]), part(get_max_min(PC[2]), [3, 1])],
xr : xr + [-1, 1] * if equal(xr[1], xr[2]) then 1 else ((xr[2] - xr[1]) / 10),
yr : yr + [-1, 1] * if equal(yr[1], yr[2]) then 1 else ((yr[2] - yr[1]) / 10),
plot2d([[discrete, PP[1], PP[2]], [discrete, PC[1], PC[2]], [discrete, PD[1], PD[2]]],
	cons(x, xr), cons(y, yr), same_xy,
	[point_type, bullet, diamond, diamond], [color, blue, red, black],
	[style, points, linespoints, linespoints], [legend, false]))$
/*}}}*/
/*}}}*/

/*{{{ 生成点集（算法输入点集不能是浮点数类型） */
set_random_state(make_random_state(absolute_real_time()))$
/* 指定点集 
P : [[-1680, 0], [1680, 0], [0, 2240], [1540, -480], [-70, 2238]]$*/
/* 标准格点 
P : apply(append, (makelist(makelist([i, j], j, 10), i, 10)))$*/
/* 标准分圆点（需开启“判定时化简”开关） 
P : makelist([cos(i / n * 2 * %pi), sin(i / n * 2 * %pi)], i, n), n = 17$*/
/* 矩形域均匀分布 
P : setify(makelist(makelist(random(2001) - 1000, 2), 100))$*/
/* 圆盘均匀分布 */
P : setify(map(lambda([r], round(1000 * sqrt(r[1]) *
	[cos(r[2] * 2 * %pi), sin(r[2] * 2 * %pi)])),
	makelist([random(1.0), random(1.0)], 100)))$
/* 正态分布 
P : setify(map(lambda([r], round(1000 * sqrt(-2 * log(r[1])) *
	[cos(r[2] * 2 * %pi), sin(r[2] * 2 * %pi)])),
	makelist([random(1.0), random(1.0)], 100)))$*/
/* 近似圆周分布 
P : setify(map(lambda([r], round(
	1000 * [cos(r[1] * 2 * %pi), sin(r[1] * 2 * %pi)] +
	50 * [cos(r[2] * 2 * %pi), sin(r[2] * 2 * %pi)])),
	makelist([random(1.0), random(1.0)], 100)))$*/
/*}}}*/

/* 显示点集及其最小覆盖圆坐标 
print(P)$ print(part(P, get_circle(P)))$*/
/* 显示点集及其凸包顶点坐标 
print(P)$ print(part(P, get_convex(P)))$*/
/* 绘制散点图及其最小覆盖圆 */
plot_covcirc(P)$ break()$
/* 绘制散点图及其凸包顶点 
plot_covpoly(P)$ break()$*/
